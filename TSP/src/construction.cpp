#include "construction.h"
#include "solution.h"
#include <iostream>
#include <cstdlib>
#include <fstream>
#include <cmath>
#include <iomanip>
#include <set>
#include <algorithm> 
using namespace std;

Construction::Construction( Solution* s)
{
    int j;
    int tamanhoSubtourInicial = 3;

    CL.clear();
    for(unsigned i =1; i <= s->in->dimensionGet(); i++)
        CL.push_back(i);

    j = rand() % CL.size() ;

    s->reset();
    //Insert first location twice in the solution
    s->location.push_back(CL[j]);
    s->location.push_back(CL[j]);

    // Remove the first location from the CL
    CL.erase(CL.begin() + j);
    for ( int i = 0; i < tamanhoSubtourInicial ; i++)
    {
        j = rand() % CL.size () ;
        s->location.insert(s->location.begin() + 1, CL[j]); 
        CL.erase(CL.begin() + j);
    }

    s->computeCostValueTSP();

}

void Construction::trivial(Solution* s){
    s->location.resize(0);
    // for(unsigned i = 1; i <= s->in->dimensionGet(); i++)
    //     s->location.push_back(i);
    s->location = {0, 1866, 3, 1749, 876, 553, 4, 554, 887, 888, 6, 1881, 26, 21, 877, 883, 886, 893, 880, 22, 1882, 27, 1824, 1704, 1860, 1841, 1708, 1709, 1710, 368, 1711, 1712, 1713, 1714, 1715, 1368, 369, 1716, 1688, 1717, 1718, 1719, 1061, 1322, 1042, 1720, 1360, 1721, 1586, 1041, 499, 1321, 38, 1060, 1850, 1040, 1320, 37, 1059, 25, 1319, 36, 1058, 24, 52, 1685, 1686, 81, 23, 82, 1687, 107, 29, 1367, 67, 1872, 31, 918, 426, 903, 233, 28, 73, 72, 1366, 1871, 30, 915, 914, 902, 1800, 1799, 1703, 935, 1798, 424, 423, 264, 1485, 265, 367, 366, 339, 657, 602, 340, 1668, 1669, 341, 676, 1672, 890, 1483, 260, 1482, 1481, 1480, 1479, 1478, 1477, 1476, 1475, 1474, 1473, 1472, 1471, 1470, 1469, 1468, 1467, 1466, 1465, 1464, 1463, 1159, 1255, 1215, 1019, 1290, 1793, 409, 1748, 1752, 1753, 1754, 1755, 1756, 1757, 1488, 1758, 1759, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1484, 1671, 667, 534, 1875, 642, 1864, 655, 262, 516, 343, 653, 643, 591, 895, 1870, 526, 1365, 1876, 535, 668, 1791, 1683, 1837, 529, 1723, 1361, 1848, 1045, 1323, 1057, 56, 55, 1838, 1684, 1792, 54, 581, 872, 764, 483, 593, 43, 1849, 1362, 1292, 1196, 1197, 1587, 1588, 978, 1655, 1852, 984, 505, 1855, 991, 1, 1772, 1774, 392, 939, 700, 737, 515, 621, 457, 135, 550, 690, 933, 507, 589, 326, 132, 993, 990, 989, 986, 983, 977, 95, 1293, 1195, 976, 926, 351, 345, 497, 532, 329, 982, 1674, 325, 692, 1816, 1817, 1775, 460, 740, 703, 1863, 994, 938, 88, 121, 1854, 988, 1660, 120, 1662, 981, 1845, 321, 379, 490, 488, 898, 128, 522, 944, 928, 736, 537, 725, 843, 578, 172, 192, 596, 594, 149, 767, 574, 861, 404, 869, 708, 536, 765, 632, 580, 871, 583, 527, 232, 646, 894, 590, 641, 652, 342, 517, 257, 900, 604, 261, 357, 484, 627, 291, 218, 858, 615, 528, 539, 147, 500, 231, 619, 845, 694, 371, 710, 727, 202, 1869, 975, 980, 332, 347, 353, 324, 588, 131, 506, 932, 693, 391, 623, 459, 739, 702, 552, 514, 134, 931, 1853, 987, 1659, 930, 331, 937, 521, 1198, 1251, 712, 714, 600, 1868, 601, 39, 1199, 599, 713, 696, 1722, 290, 1585, 1064, 151, 1584, 1583, 1582, 1581, 1580, 1579, 289, 1578, 406, 359, 1682, 356, 1681, 1364, 355, 1680, 1670, 1363, 288, 1577, 1576, 1456, 1575, 1574, 1573, 1572, 1571, 287, 1486, 1570, 1569, 1568, 1567, 1566, 1565, 1564, 1563, 1562, 1561, 1560, 1559, 1558, 1224, 1557, 1556, 1555, 1288, 1158, 1254, 1554, 1359, 1017, 1114, 1113, 1112, 1111, 1110, 1553, 1552, 1518, 1551, 1505, 1550, 1549, 1422, 1548, 1504, 1547, 1109, 1108, 1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1092, 157, 400, 1093, 286, 285, 399, 1086, 1087, 1088, 1089, 1090, 1091, 396, 397, 1052, 414, 413, 417, 418, 229, 228, 1126, 163, 1127, 164, 1053, 1128, 1129, 1130, 1131, 1132, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1318, 1153, 1154, 1155, 1156, 1157, 1218, 1219, 1220, 1221, 1222, 1223, 486, 681, 1727, 1781, 1874, 1225, 1840, 1844, 1776, 1836, 1735, 1888, 1865, 49, 84, 46, 1851, 74, 66, 40, 5, 1487, 85, 86, 1677, 1678, 1679, 1457, 775, 575, 495, 463, 682, 936, 718, 917, 266, 543, 425, 941, 570, 555, 603, 889, 640, 874, 656, 501, 884, 618, 878, 625, 891, 518, 875, 549, 1443, 1442, 1441, 1440, 1439, 1438, 1437, 1436, 1435, 1434, 1433, 1432, 1431, 1430, 1429, 1428, 1289, 1018, 1152, 1151, 1150, 1149, 1148, 1147, 1146, 1145, 1144, 1143, 1142, 1141, 1140, 1139, 1138, 1137, 1136, 1135, 1134, 1133, 1593, 1724, 1886, 1402, 1878, 1596, 1649, 1054, 666, 1762, 750, 749, 1508, 1123, 1795, 665, 478, 762, 1763, 1832, 1796, 1124, 1509, 1426, 1257, 1813, 761, 1120, 1533, 1336, 42, 1230, 1827, 93, 952, 58, 1530, 1623, 1632, 1076, 1011, 679, 77, 78, 1611, 1010, 1075, 1631, 1622, 1529, 57, 951, 79, 1826, 1229, 41, 1335, 1532, 1119, 664, 1812, 1256, 1425, 748, 747, 306, 310, 155, 141, 760, 768, 678, 629, 450, 302, 781, 812, 453, 673, 1497, 1736, 1779, 1780, 1610, 1009, 1074, 224, 227, 416, 412, 395, 156, 1085, 1084, 1083, 1082, 1081, 950, 1080, 1079, 1073, 1008, 974, 973, 972, 971, 1303, 8, 1304, 1117, 1514, 109, 868, 1491, 1490, 557, 7, 1513, 1116, 1115, 1512, 1546, 284, 1489, 1545, 1544, 282, 840, 839, 103, 790, 71, 1294, 1200, 649, 946, 295, 117, 1325, 1690, 1856, 995, 1299, 1787, 62, 1065, 1374, 801, 433, 296, 183, 565, 808, 791, 850, 776, 744, 785, 942, 755, 813, 650, 804, 203, 855, 176, 787, 124, 464, 798, 348, 221, 360, 795, 508, 136, 205, 439, 402, 491, 806, 635, 152, 238, 410, 742, 1066, 63, 1300, 996, 1857, 1691, 1326, 1381, 1382, 1383, 1384, 98, 99, 1809, 947, 1226, 1227, 1201, 1295, 1228, 948, 1327, 1380, 1379, 997, 1301, 1378, 1377, 1068, 1067, 241, 1375, 1376, 240, 1069, 1788, 1302, 137, 440, 206, 796, 361, 509, 222, 349, 799, 802, 434, 125, 809, 492, 465, 177, 184, 788, 566, 297, 1202, 1331, 1330, 1329, 1328, 1692, 153, 741, 411, 239, 403, 807, 998, 207, 138, 999, 1693, 1694, 118, 123, 435, 298, 350, 803, 122, 223, 800, 362, 797, 510, 139, 441, 208, 908, 1695, 1858, 1000, 907, 1810, 1789, 1070, 906, 909, 905, 910, 911, 1071, 1790, 1811, 912, 1001, 1859, 1696, 1537, 1538, 945, 1332, 1333, 1204, 913, 1539, 1540, 1541, 1334, 1542, 281, 822, 1373, 179, 12, 1494, 823, 1517, 1595, 826, 211, 432, 1808, 1003, 1608, 11, 16, 1307, 1401, 14, 13, 560, 180, 1214, 1213, 1212, 1211, 1210, 1209, 1208, 1207, 1206, 1205, 493, 466, 567, 185, 178, 789, 810, 949, 1604, 1825, 1203, 116, 651, 792, 805, 636, 814, 204, 756, 778, 857, 829, 746, 852, 842, 786, 699, 428, 780, 838, 848, 817, 757, 280, 383, 853, 863, 237, 943, 867, 759, 422, 268, 774, 821, 276, 584, 294, 825, 754, 811, 248, 562, 277, 452, 680, 154, 639, 645, 305,
 311, 312, 617, 685, 363, 470, 187, 220, 717, 610, 226, 637, 634, 378, 140, 431, 675, 455, 689, 564, 301, 559, 772, 269, 468, 210, 106, 1543, 1372, 716, 91, 1516, 33, 1400, 1306, 15, 10, 1607, 1002, 44, 1525, 1072, 1619, 1634, 87, 60, 684, 1698, 1528, 1527, 1526, 1007, 1006, 1005, 1004, 1609, 1614, 1013, 1621, 1636, 954, 1625, 1078, 53, 451, 377, 1613, 76, 75, 1738, 1499, 688, 1496, 1495, 18, 17, 1118, 1305, 1399, 585, 820, 819, 1493, 236, 1807, 1806, 1805, 1803, 114, 101, 105, 111, 1804, 115, 102, 104, 1298, 64, 1297, 1296, 777, 113, 851, 698, 816, 382, 1371, 1395, 1396, 245, 1397, 246, 1398, 275, 1515, 110, 864, 1492, 247, 1394, 1393, 243, 1392, 1391, 1390, 1389, 242, 1388, 1387, 1386, 1385, 856, 743, 100, 745, 854, 421, 267, 866, 758, 283, 235, 841, 697, 779, 830, 837, 815, 715, 818, 381, 849, 429, 244, 771, 561, 728, 638, 558, 663, 376, 430, 674, 687, 270, 454, 658, 467, 209, 644, 616, 753, 824, 293, 586, 158, 563, 773, 274, 865, 65, 9, 1498, 1737, 96, 97, 1612, 83, 1012, 1077, 1633, 1624, 1531, 59, 953, 94, 1828, 1231, 1324, 219, 1337, 1534, 1121, 729, 1814, 1258, 1427, 1510, 1125, 1797, 519, 1833, 1764, 1673, 47, 1055, 1650, 1597, 1879, 1403, 1887, 1725, 1594, 1643, 1500, 1503, 1642, 1778, 1663, 1423, 1606, 80, 1506, 1626, 1519, 1627, 1520, 1523, 1462, 1461, 1522, 1521, 307, 1507, 1760, 545, 1424, 1664, 1618, 1421, 1414, 1413, 1412, 1411, 1410, 1409, 1408, 1407, 1406, 1405, 1404, 660, 631, 770, 314, 731, 393, 1599, 547, 372, 541, 1046, 318, 967, 407, 446, 159, 962, 963, 964, 965, 162, 966, 419, 386, 1640, 1641, 1598, 1056, 1639, 1638, 1637, 659, 630, 769, 313, 730, 126, 961, 960, 959, 958, 957, 956, 955, 469, 186, 608, 1535, 225, 609, 1232, 1829, 92, 1699, 364, 89, 1697, 1620, 1635, 45, 61, 719, 1830, 1233, 782, 720, 1815, 1122, 1536, 704, 1259, 160, 251, 1511, 1644, 1047, 1645, 1646, 1600, 316, 1589, 1647, 1648, 1656, 1657, 1501, 1658, 1416, 1616, 1617, 19, 1653, 1415, 1628, 1667, 1458, 375, 436, 1728, 1700, 1020, 793, 1701, 1729, 923, 258, 437, 448, 502, 308, 661, 444, 384, 1605, 300, 706, 20, 1651, 90, 705, 1601, 783, 1590, 1726, 721, 1877, 1777, 1831, 1048, 968, 1260, 252, 254, 1654, 476, 1261, 969, 196, 970, 214, 279, 473, 161, 447, 253, 320, 475, 531, 273, 195, 212, 127, 317, 315, 420, 520, 479, 408, 387, 148, 344, 471, 1051, 388, 1765, 1766, 1767, 1603, 1592, 1652, 1768, 1502, 1666, 1420, 1615, 1665, 1769, 1419, 1676, 1770, 1630, 1460, 1771, 1731, 1014, 389, 1015, 1016, 145, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 143, 831, 1747, 834, 119, 835, 832, 1880, 833, 569, 542, 1035, 144, 1036, 1037, 1038, 1039, 1883, 1707, 1847, 1180, 1234, 1235, 1236, 1237, 1238, 188, 683, 278, 1239, 1240, 1241, 1242, 1243, 920, 1370, 1884, 571, 572, 442, 1689, 443, 670, 672, 671, 1244, 1245, 1246, 1063, 1247, 1044, 1248, 1249, 1250, 598, 860, 847, 577, 174, 191, 190, 827, 1843, 979, 985, 1661, 828, 992, 2, 1773, 48, 940, 899, 701, 738, 622, 458, 390, 551, 133, 691, 934, 327, 587, 130, 352, 927, 346, 330, 533, 292, 322, 380, 530, 494, 556, 129, 733, 925, 513, 504, 489, 487, 628, 523, 929, 540, 538, 844, 735, 201, 726, 620, 724, 175, 1194, 1193, 1192, 1043, 1191, 1062, 1190, 1189, 1188, 1187, 1186, 170, 1185, 169, 1184, 1183, 1182, 1181, 171, 168, 1179, 1862, 1706, 1846, 1823, 1822, 1821, 1820, 1819, 462, 512, 1751, 626, 922, 51, 921, 624, 1746, 511, 461, 1818, 1524, 108, 1761, 1785, 1786, 415, 263, 142, 193, 216, 182, 256, 481, 752, 607, 524, 365, 427, 401, 374, 606, 732, 924, 259, 438, 449, 503, 309, 662, 445, 723, 354, 249, 456, 477, 272, 734, 394, 544, 595, 707, 335, 303, 338, 328, 250, 334, 299, 474, 686, 337, 336, 304, 333, 271, 472, 568, 794, 1591, 1602, 836, 373, 319, 323, 1317, 1316, 1315, 1314, 1313, 1312, 213, 1311, 1310, 1309, 1308, 1050, 1049, 1262, 1263, 1264, 1265, 194, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1418, 1675, 722, 1417, 784, 1629, 1459, 112, 1730, 1702, 1216, 1022, 1021, 751, 480, 215, 255, 181, 1252, 1253, 1160, 1739, 1740, 1741, 1742, 1743, 1744, 1733, 50, 1750, 1867, 1745, 1734, 1784, 1835, 485, 1839, 1885, 1291, 1161, 1023, 1217, 1285, 1286, 1287, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 165, 197, 1169, 1170, 166, 198, 199, 1171, 167, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 200, 605, 582, 525, 234, 579, 919, 763, 709, 405, 654, 358, 677, 482, 904, 916, 669, 573, 766, 901, 150, 592, 217, 614, 897, 873, 648, 146, 498, 230, 496, 870, 862, 633, 370, 173, 576, 846, 859, 597, 189, 711, 695, 70, 69, 647, 896, 1369, 68, 1873, 32, 34, 1801, 35, 1802, 613, 1842, 1861, 1705, 612, 611, 879, 892, 885, 882, 881, 1732, 1783, 1834, 1794, 548, 546, 385, 398, 1782};
    s->location.push_back(s->location[0]);
    s->computeCostValueTSP();
}

void Construction::constructiveProcedure(Solution* s, const double alpha){
    
        int position;
        calculaCustoInsercao(s);
        // clock_t begin;
        while ( CL.size() > 0)
        {
            // begin = clock();
            position = rand()%(int(floor(custoInsercao.size()*alpha))+1);
            // cout<<"position = "<<(double)(clock() - begin) / CLOCKS_PER_SEC << endl;

            // begin = clock();
            s->location.insert(s->location.begin() + custoInsercao[position].arestaRemovida +1, custoInsercao[position].noInserido); 
            // cout<<"insert = "<<(double)(clock() - begin) / CLOCKS_PER_SEC << endl;

            s->costValueTSP+=custoInsercao[position].custo;

            // begin = clock();
            remove(CL.begin(), CL.end(), custoInsercao[position].noInserido);
            // cout<<"remove = "<<(double)(clock() - begin) / CLOCKS_PER_SEC << endl;

            // begin = clock();
            CL.resize(CL.size()-1);
            // cout<<"resize = "<<(double)(clock() - begin) / CLOCKS_PER_SEC << endl;

            // begin = clock();
            calculaCustoInsercao(s);
            // cout<<"calculaCustoInsercao = "<<(double)(clock() - begin) / CLOCKS_PER_SEC << endl;

            // cout<<endl;
        }
    
}

void Construction::calculaCustoInsercao(Solution* s){

    custoInsercao.resize((s->location.size() - 1) * CL.size());

    for(unsigned i = 0, j = 1, l = 0; i < s->location.size() - 1; i++, j++) {
        for (auto k : CL ) {
            custoInsercao[l].custo = 
                                    s->in->distanceGet(s->location[i],k) + 
                                    s->in->distanceGet(s->location[j],k) -
                                    s->in->distanceGet(s->location[i],s->location[j]); 
            custoInsercao[l].noInserido = k;
            custoInsercao[l].arestaRemovida = i ; 
            l++;
        } 
    }
    sort(custoInsercao.begin(), custoInsercao.end(), compareByCost);
}

ostream & operator << (ostream &out, const Construction &c){
    Color::Modifier red(Color::FG_RED);
    Color::Modifier green(Color::GREEN);
    Color::Modifier blue(Color::FG_BLUE);
    Color::Modifier deff(Color::FG_DEFAULT);

    out << 
        red << "noInserido" << deff<<" | " << 
        green<<"arestaRemovida"<< deff <<" | " << 
        blue<<"custo"<< deff << endl;

    for (size_t i = 0; i < c.custoInsercao.size(); i++) {
        out << 
        red << setw(10) << c.custoInsercao[i].noInserido << deff<<" | " << 
        green<< setw(14) << c.custoInsercao[i].arestaRemovida<< deff <<" | " << 
        blue<< setw(5) << c.custoInsercao[i].custo<< deff << endl;
    }
    return out;
}